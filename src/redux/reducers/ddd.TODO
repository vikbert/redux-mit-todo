
DDD:
  Komlexistäten:
    - Business Regel und Prozesse
    - unterschiedliche Wahrnehmen
    - Unwissenheit über Fachlichkeiten
    - nicht eindeutiges Vokabular
    - Vermischung von Business Anforderungen und technische Lösungen
      ✘ gemeinsam Sprache und Verständnisse vs MVP
      ✘ continuierlich Zusammenarbeiten vs MVP
      ✘ Scheduling von technischen Lösungen und Implementierung vs MVP schnell auf Markt
    Datenmodel
      ✔ sub model abbilden
  Moderne Entwicklungen:
    - Domäne Experten/Fachabteilungen
    - Domäne aufteilen
    - continuierlich Zusammenarbeiten
    - 
  Theorie and Praxis:
    ✘ Team Wissen und Erfahrungen mit DDD
    ✘ Kennenlernen Phase und Kommunikation intensive
  
  Kosten/Komplexität:
    ✘ Kosten von DDD am Anfang wissentlich höher als Data-centric Entwicklung
  
  Ubiquitous Language:
    ✘ selbe Sprache im Code(Deutsch)
    ✔ domain/business spezifisch
    ✔ exakt von Business und Fachabteilung/Dev verwendet
    ✔ Misverständnisse vermeiden

  Bounded context:
    ✔ der selbe Entity kann unterschiedlich dargetstellt, je nachdem welchem Kontext sich gerade befindet
      ☐ Person
        Kaufinteressanter, wenn man 
        Kunden, wenn man ein Kauf abgeschlossen will
        Beschwerden, wenn man mit Service nicht zufrieden ist
      ☐ Debitbook service als Bounded Context
        listening auf bestimmtes Event und erzeugt die entsprichte Rechnungen
        nicht ganz verbunden mit Business Applikation
  
  Context Mapping:
    ✘ vergelich mit bounded Context

  Event Storming:
    - not the domain expertes knowledge
    - Timeline basierte Ereignis-Fluss innerhalb Applikation
    ✔ Business Fokusiert
    ✔ Pain Points fokusieren

